var app=angular.module("documentManagerApp",["ui.router","ngMaterial","ngMessages","ngAnimate","ngAria","ngMdIcons","ngStorage"]);app.config(["$stateProvider","$httpProvider","$urlRouterProvider","$locationProvider","$mdThemingProvider",function(e,t,r,o,s,a){e.state("home",{url:"/",views:{"":{templateUrl:"partials/nav-view.html"},"homeView@home":{templateUrl:"partials/home-view.html",controller:"MainCtrl"},"aboutView@home":{templateUrl:"partials/about-view.html",controller:"MainCtrl"}}}).state("login",{url:"/login",views:{"":{templateUrl:"partials/nav-view.html"},"homeView@login":{templateUrl:"partials/login-view.html",controller:"UserCtrl"}}}).state("signup",{url:"/signup",views:{"":{templateUrl:"partials/nav-view.html"},"homeView@signup":{templateUrl:"partials/signup-view.html",controller:"UserCtrl"}}}).state("userhome",{url:"/userhome",views:{"":{templateUrl:"partials/usernav-view.html",controller:"UserCtrl"},"docView@userhome":{templateUrl:"partials/userHome-view.html",controller:"docCtrl"}}}).state("all-docs",{url:"/all-docs",views:{"":{templateUrl:"partials/usernav-view.html",controller:"UserCtrl"},"docView@all-docs":{templateUrl:"partials/alldoc-view.html",controller:"docCtrl"}}}).state("view-profile",{url:"/view-profile",views:{"":{templateUrl:"partials/usernav-view.html",controller:"UserCtrl"},"docView@view-profile":{templateUrl:"partials/userProfile-view.html",controller:"UserCtrl"}}}).state("edit-profile",{url:"/edit-profile",views:{"":{templateUrl:"partials/usernav-view.html",controller:"UserCtrl"},"docView@edit-profile":{templateUrl:"partials/userProfileEdit-view.html",controller:"UserCtrl"}}}),r.otherwise("/"),o.html5Mode(!0);var n={50:"#ffffff",100:"#ffffff",200:"#ffffff",300:"#ffffff",400:"#ffffff",500:"#ffffff",600:"#f2f2f2",700:"#e6e6e6",800:"#d9d9d9",900:"#cccccc",A100:"#ffffff",A200:"#ffffff",A400:"#ffffff",A700:"#bfbfbf"};s.definePalette("newPrimary",n),s.theme("default").primaryPalette("newPrimary").accentPalette("light-blue").warnPalette("red").backgroundPalette("newPrimary"),t.interceptors.push(["$q","$location","$localStorage",function(e,t,r){return{request:function(e){return e.headers=e.headers||{},r.userToken&&(e.headers["x-access-token"]=r.userToken),e},responseError:function(r){return(401===r.status||403===r.status)&&t.path("/signin"),e.reject(r)}}}])}]),angular.module("documentManagerApp").controller("docCtrl",["docService","$state","$rootScope","$window","$scope","$location","$mdDialog","$localStorage",function(e,t,r,o,s,a,n,l){function i(t,r,o,s){t.createDocument=function(){var r={title:t.title,content:t.content,user:l.activeUser.username};e.addDocument(r).success(function(e){o.reload(),s.displayStatus(e.message)}).error(function(e){s.displayError(e.message+"try, again")})},t.hide=function(){r.hide()},t.cancel=function(){r.cancel()}}s.getAllDocuments=function(){e.getAllDocuments().success(function(e){s.Documents=e}).error(function(e){s.getErrorMessage=e.message})},s.getOneDocument=function(t){var o=s.id;e.getOneDocument(o).success(function(e){s.Document=e,l.currentDoc=e}).error(function(e){r.displayError(e.message)})},s.getAllUserDocuments=function(){var t=l.activeUser._id;e.getAllUserDocuments(t).success(function(e){s.userDocuments=e}).error(function(e){r.displayError(e.message)})},s.editDocument=function(o,s){var a={title:s.title,content:s.content};e.updateDocument(o,a).success(function(e){t.reload(),r.displayStatus(e.message)}).error(function(e){r.displayError(e.message+"try, again")})},s.deleteDocument=function(o){e.deleteDocument(o).success(function(e){t.reload(),r.displayStatus(e.message)}).error(function(e){r.displayError(e.message+"try, again")})},r.showDocDialog=function(e){n.show({controller:i,templateUrl:"../../partials/docDialog-view.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),angular.module("documentManagerApp").controller("MainCtrl",["$state","$rootScope","$scope","$mdToast",function(e,t,r,o){t.displayStatus=function(e){o.show(o.simple().content(e).position("top right").hideDelay(2e3))},t.displayError=function(e){o.show({template:'<md-toast style="background:#dc145c; color:#ffffff">'+e+"</md-toast>",hideDelay:3e3,position:"top right"})}}]),angular.module("documentManagerApp").controller("UserCtrl",["UserService","$rootScope","$state","$scope","$location","$mdSidenav","$localStorage",function(e,t,r,o,s,a,n){o.signin=function(){var s={username:o.username,password:o.password};e.login(s).success(function(e){n.activeUser=e.user,n.userToken=e.token,t.displayStatus(e.message),r.go("userhome")}).error(function(e){t.displayError(e.message),r.go("login")})},o.signup=function(){var s={name:{first:o.firstname,last:o.lastname},username:o.username,email:o.email,password:o.password};e.signup(s).success(function(e){t.displayStatus(e.message),r.go("login")}).error(function(e){t.displayError(e.message+" try, again")})},o.logout=function(){n.$reset(),e.logout().success(function(e){t.displayStatus(e.message),r.go("home")}).error(function(e){t.displayError(e.message)})},t.getUserDetails=function(){var r=n.activeUser._id;e.getUser(r).success(function(e){o.userDetails=e}).error(function(e){t.displayError(e.message)})},o.deleteUser=function(){var o=n.activeUser._id;e.deleteUser(o).success(function(e){t.displayStatus(e.message),r.go("home")}).error(function(e){t.displayError(e.message)})},o.toggleSideNav=function(e){a(e).toggle()},o.updateUser=function(){var s=n.activeUser._id,a={username:o.userDetails.username,email:o.userDetails.email,password:o.userDetails.password,name:{first:o.userDetails.name.first,last:o.userDetails.name.last}};e.updateUserData(s,a).success(function(e){t.displayStatus(e.message),r.reload("userhome")}).error(function(e){t.displayError(e.message+" try, again")})},o.redirect=function(e){return r.go(e)}}]);var app=angular.module("documentManagerApp");app.factory("docService",["$http","baseUrl",function(e,t){var r={addDocument:function(r){return e.post(t+"/api/documents",r)},getAllDocuments:function(){return e.get(t+"/api/documents")},getOneDocument:function(r){return e.get(t+"/api/documents/"+r)},getAllUserDocuments:function(r){return e.get(t+"/api/users/"+r+"/documents")},updateDocument:function(r,o){return e.put(t+"/api/documents/"+r,o)},deleteDocument:function(r){return e["delete"](t+"/api/documents/"+r)}};return r}]);var app=angular.module("documentManagerApp");app.value("baseUrl","http://localhost:3000"),app.factory("UserService",["$http","baseUrl",function(e,t){var r={login:function(r){return e.post(t+"/api/users/login",r)},logout:function(){return e.post(t+"/api/users/logout")},signup:function(r){return e.post(t+"/api/users/",r)},getUser:function(r){return e.get(t+"/api/users/"+r)},updateUserData:function(r,o){return e.put(t+"/api/users/"+r,o)},deleteUser:function(r){return e["delete"](t+"/api/users/"+r)}};return r}]);
//# sourceMappingURL=data:application/json;base64,
